     1                                  ; Write an assembly program to define 3 integers of 2 bytes each.
     2                                  ; Name these a, b and c.
     3                                  ; Compute and save into 4 memory locations:
     4                                  ; a+b, a-b, a+c, a-c.
     5                                  
     6                                  	segment	.data
     7 00000000 0200                    a	dw	2
     8 00000002 0400                    b	dw	4
     9 00000004 FAFF                    c	dw	-6
    10                                  
    11                                  	segment .bss
    12 00000000 <res 00000002>          sum1	resw	1
    13 00000002 <res 00000002>          sum2	resw	1
    14 00000004 <res 00000002>          sum3	resw	1
    15 00000006 <res 00000002>          sum4	resw	1
    16                                  
    17                                  	segment .text
    18                                  	global _start
    19                                  _start:
    20 00000000 480FBF0425-             	movsx	rax, word [a]	; get a from memory
    20 00000005 [00000000]         
    21 00000009 480FBF1C25-             	movsx	rbx, word [b]	; get b from memory
    21 0000000E [02000000]         
    22 00000012 480FBF0C25-             	movsx	rcx, word [c]	; get c from memory
    22 00000017 [04000000]         
    23                                  
    24 0000001B 50                      	push	rax		; store rax for reusing 4 times
    25 0000001C 50                      	push	rax
    26 0000001D 50                      	push 	rax
    27 0000001E 50                      	push 	rax
    28                                  	
    29                                  
    30                                  _sum1:
    31 0000001F 58                      	pop	rax		; get a
    32 00000020 4801D8                  	add	rax, rbx	; a + b //rax <- rax + rbx
    33 00000023 48890425[00000000]      	mov	[sum1], rax	; store the sum // [sum1] <- rax
    34                                  
    35                                  _sum2:
    36 0000002B 58                      	pop	rax
    37 0000002C 4829D8                  	sub	rax, rbx	; a - b //rax <- rax - rbx
    38 0000002F 48890425[02000000]      	mov	[sum2], rax	; store the sum
    39                                  
    40                                  _sum3: 	
    41 00000037 58                      	pop	rax
    42 00000038 4801C8                  	add	rax, rcx	; a+c
    43 0000003B 48890425[04000000]      	mov	[sum3], rax	; store the sum
    44                                  
    45                                  _sum4:
    46 00000043 58                      	pop	rax
    47 00000044 4829C8                  	sub	rax, rcx	; a-c
    48 00000047 48890425[06000000]      	mov	[sum4], rax	; store the sum
    49                                  
    50                                  _exit:
    51 0000004F B801000000              	mov	rax, 1
    52 00000054 4831DB                  	xor	rbx, rbx
    53 00000057 CD80                    	int	0x80
    54                                  
